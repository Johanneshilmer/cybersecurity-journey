Automate Cybersecurity Task with Python

Module 1 Intro till Python

Python och programmering:
  Programmering inneb√§r att ge datorer instruktioner f√∂r att utf√∂ra uppgifter. Datorer kommunicerar egentligen i bin√§rkod (0 och 1), 
  men programmeringsspr√•k som Python g√∂r det enklare f√∂r m√§nniskor att skriva kod med mindre och mer f√∂rst√•elig syntax.

  Python i cybers√§kerhet anv√§nds ofta f√∂r att automatisera repetitiva uppgifter, exempelvis:
    üëâLogganalys
    üëâMalwareanalys
    üëâHantering av accesskontroller
    üëâIntr√•ngsdetektion
    üëâRegelefterlevnad (compliance checks)
    üëâN√§tverksskanning

# Skriver ut hello python
print("Hello Python")

Data typer:
  String:
    "updates needed"
    "20%"
    "5.0"
    "35"
    "**/**/**" 
    ""

  List:
    [12, 36, 54, 1, 7]
    ["eraab", "arusso", "drosas"]
    [True, False, True, True]
    [15, "approved", True, 45.5, False]
    []

  Integer:
    -100 
    -12
    -1
    0
    1
    20
    500 

  Float:
    -2.2
    -1.34
    0.0
    0.34 

  Boolean:
    True
    False

  Tuple:
    ("wjaffrey", "arutley", "dkot")
    (46, 2, 13, 2, 8, 0, 0)
    (True, False, True, True)
    ("wjaffrey", 13, True)

  Set:
    {"jlanksy", "drosas", "nmason"}

  Dictionary:
    { 1: "East",
    2: "West",
    3: "North",
    4: "South" }

  Att se vilken type en variable har anv√§nder vi type()
  username = "johannes"
  print(type(username))
  output => <class 'str'> "allts√• string"

Assign och reassign variables i Python
  # Assign "username"
  username = "nzhao"
  print(username)
  output => nzhao

  # ReAssign "username"
  username = "johannes"
  print(username)
  output => johannes

Olika s√§tt att loopa

For loop nummer
  i = 0
  for i in range(11):
    print(i)

  for i in range(0, 5):
    print(i)


For loop lista
  list = ["banan", "√§pple", "mango"]
  for x in list:
    print(x)

While loops

  i = 0
  while i < 5:
      print(i)
      i += 1

Kontrollera loop-exekvering
  üëâbreak: avbryter loopen helt n√§r ett villkor uppfylls.
  üëâcontinue: hoppar √∂ver den aktuella iterationen och forts√§tter med n√§sta.

Kort sagt:
  üëâfor ‚Üí iterera genom en sekvens.
  üëâwhile ‚Üí upprepa baserat p√• ett villkor.
  üëâbreak/continue ‚Üí styra exekveringen.
  üëâUndvik o√§ndliga loopar om du inte vill att koden ska k√∂ra f√∂r evigt.

Olika operator och dess mening
> greater than

< less than

>= greater than or equal to

<= less than or equal to

== equal to

!= not equal to



if statements
Ett if-statement anv√§nds f√∂r att l√•ta datorn fatta beslut. Det kontrollerar om ett villkor √§r sant eller falskt och k√∂r kod endast om villkoret √§r sant.
  H√§r har vi olika if statements med if, if else, if else elif, if and, if not

  if status == 200:
      print("OK")


  if status == 200:
      print("OK")
  else:
      print("check other status")
  
  
  
  if status == 200:
      print("OK")
  elif status == 400:
      print("Bad Request")
  elif status == 500:
      print("Internal Server Error") 
  
  
  if status == 200:
      print("OK")
  elif status == 400:
      print("Bad Request")
  elif status == 500:
      print("Internal Server Error")
  else:
      print("check other status")
  
  
  if status >= 200 and status <= 226:
      print("successful response")
  
  
  if not(status >= 200 and status <= 226):
      print("check status")










Module 2 Write effective Python code

Basic python functions
  Python-funktioner anv√§nds f√∂r att √•teranv√§nda kod och effektivisera repetitiva uppgifter, 
  vilket √§r s√§rskilt anv√§ndbart i cybers√§kerhet d√§r man ofta beh√∂ver analysera loggar och uppt√§cka m√∂nster som misst√§nkta inloggningsf√∂rs√∂k.


Built in function
  √Ñr funktioner som kommer som default i python som tillexempel print()

User-defined functions
  √Ñr funtioner som anv√§ndaren sj√§lv har designat.


üëâExempel p√• en funktion
def greet_employee():
  print("Welcome! You're inlogged in.")

üëâKallar vi p√• v√•r funtion
greet_employee()


Argument
  √Ñr data som tills√§tts till en funktion n√§r funktionen kallas.

üëâExempel p√• en funktion med parametrar
def greet_employee(name):
  print("Welcome!", name)

üëâKallar vi p√• v√•r funtion med ett argument
greet_employee("Johannes")



Return statement
  √Ñr statement som exekverar inom en funktion och som skickar ut infromationen n√§r funktionen kallas.

üëâExempel p√• en funktion med statement
def calculate_fails(total_attempts, failed_attemts):
  fail_percentage = failed_attemts / total_attempts
  return fail_percentage

üëâKallar vi p√• v√•r funtion med statements
calculate_fails(4,2)
output => 0.5











