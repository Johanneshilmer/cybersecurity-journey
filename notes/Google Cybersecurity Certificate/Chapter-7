Automate Cybersecurity Task with Python

Module 1 Intro till Python

Python och programmering:
  Programmering innebÃ¤r att ge datorer instruktioner fÃ¶r att utfÃ¶ra uppgifter. Datorer kommunicerar egentligen i binÃ¤rkod (0 och 1), 
  men programmeringssprÃ¥k som Python gÃ¶r det enklare fÃ¶r mÃ¤nniskor att skriva kod med mindre och mer fÃ¶rstÃ¥elig syntax.

  Python i cybersÃ¤kerhet anvÃ¤nds ofta fÃ¶r att automatisera repetitiva uppgifter, exempelvis:
    ğŸ‘‰Logganalys
    ğŸ‘‰Malwareanalys
    ğŸ‘‰Hantering av accesskontroller
    ğŸ‘‰IntrÃ¥ngsdetektion
    ğŸ‘‰Regelefterlevnad (compliance checks)
    ğŸ‘‰NÃ¤tverksskanning

# Skriver ut hello python
print("Hello Python")

Data typer:
  String:
    "updates needed"
    "20%"
    "5.0"
    "35"
    "**/**/**" 
    ""

  List:
    [12, 36, 54, 1, 7]
    ["eraab", "arusso", "drosas"]
    [True, False, True, True]
    [15, "approved", True, 45.5, False]
    []

  Integer:
    -100 
    -12
    -1
    0
    1
    20
    500 

  Float:
    -2.2
    -1.34
    0.0
    0.34 

  Boolean:
    True
    False

  Tuple:
    ("wjaffrey", "arutley", "dkot")
    (46, 2, 13, 2, 8, 0, 0)
    (True, False, True, True)
    ("wjaffrey", 13, True)

  Set:
    {"jlanksy", "drosas", "nmason"}

  Dictionary:
    { 1: "East",
    2: "West",
    3: "North",
    4: "South" }

  Att se vilken type en variable har anvÃ¤nder vi type()
  username = "johannes"
  print(type(username))
  output => <class 'str'> "alltsÃ¥ string"

Assign och reassign variables i Python
  # Assign "username"
  username = "nzhao"
  print(username)
  output => nzhao

  # ReAssign "username"
  username = "johannes"
  print(username)
  output => johannes

Olika sÃ¤tt att loopa

For loop nummer
  i = 0
  for i in range(11):
    print(i)

  for i in range(0, 5):
    print(i)


For loop lista
  list = ["banan", "Ã¤pple", "mango"]
  for x in list:
    print(x)

While loops

  i = 0
  while i < 5:
      print(i)
      i += 1

Kontrollera loop-exekvering
  ğŸ‘‰break: avbryter loopen helt nÃ¤r ett villkor uppfylls.
  ğŸ‘‰continue: hoppar Ã¶ver den aktuella iterationen och fortsÃ¤tter med nÃ¤sta.

Kort sagt:
  ğŸ‘‰for â†’ iterera genom en sekvens.
  ğŸ‘‰while â†’ upprepa baserat pÃ¥ ett villkor.
  ğŸ‘‰break/continue â†’ styra exekveringen.
  ğŸ‘‰Undvik oÃ¤ndliga loopar om du inte vill att koden ska kÃ¶ra fÃ¶r evigt.

Olika operator och dess mening
> greater than

< less than

>= greater than or equal to

<= less than or equal to

== equal to

!= not equal to



if statements
Ett if-statement anvÃ¤nds fÃ¶r att lÃ¥ta datorn fatta beslut. Det kontrollerar om ett villkor Ã¤r sant eller falskt och kÃ¶r kod endast om villkoret Ã¤r sant.
  HÃ¤r har vi olika if statements med if, if else, if else elif, if and, if not

  if status == 200:
      print("OK")


  if status == 200:
      print("OK")
  else:
      print("check other status")
  
  
  
  if status == 200:
      print("OK")
  elif status == 400:
      print("Bad Request")
  elif status == 500:
      print("Internal Server Error") 
  
  
  if status == 200:
      print("OK")
  elif status == 400:
      print("Bad Request")
  elif status == 500:
      print("Internal Server Error")
  else:
      print("check other status")
  
  
  if status >= 200 and status <= 226:
      print("successful response")
  
  
  if not(status >= 200 and status <= 226):
      print("check status")










Module 2 Write effective Python code

Basic python functions
  Python-funktioner anvÃ¤nds fÃ¶r att Ã¥teranvÃ¤nda kod och effektivisera repetitiva uppgifter, 
  vilket Ã¤r sÃ¤rskilt anvÃ¤ndbart i cybersÃ¤kerhet dÃ¤r man ofta behÃ¶ver analysera loggar och upptÃ¤cka mÃ¶nster som misstÃ¤nkta inloggningsfÃ¶rsÃ¶k.


Built in function
  Ã„r funktioner som kommer som default i python som tillexempel print(), type(), sorted() och max()

User-defined functions
  Ã„r funtioner som anvÃ¤ndaren sjÃ¤lv har designat.


ğŸ‘‰Exempel pÃ¥ en funktion
def greet_employee():
  print("Welcome! You're inlogged in.")

ğŸ‘‰Kallar vi pÃ¥ vÃ¥r funtion
greet_employee()


Argument
  Ã„r data som tillsÃ¤tts till en funktion nÃ¤r funktionen kallas.

ğŸ‘‰Exempel pÃ¥ en funktion med parametrar
def greet_employee(name):
  print("Welcome!", name)

ğŸ‘‰Kallar vi pÃ¥ vÃ¥r funtion med ett argument
greet_employee("Johannes")



Return statement
  Ã„r statement som exekverar inom en funktion och som skickar ut infromationen nÃ¤r funktionen kallas.

ğŸ‘‰Exempel pÃ¥ en funktion med statement
def calculate_fails(total_attempts, failed_attemts):
  fail_percentage = failed_attemts / total_attempts
  return fail_percentage

ğŸ‘‰Kallar vi pÃ¥ vÃ¥r funtion med statements
calculate_fails(4,2)
output => 0.5

ğŸ‘‰Vi kan ocksÃ¥ spara output i en variable som detta exempel:
percentage = calculate_fails(4,2)


I Python anvÃ¤nds parametrar (variabler i funktionsdefinitionen) och argument (vÃ¤rden som skickas in vid funktionsanrop) fÃ¶r att arbeta med data i funktioner. 
FÃ¶r att returnera resultat anvÃ¤nds return-satser, vilket gÃ¶r det mÃ¶jligt att lagra och Ã¥teranvÃ¤nda vÃ¤rden i andra delar av koden.

Variabler i funktioner kan vara:
  ğŸ‘‰Globala variabler â€“ definieras utanfÃ¶r funktioner och kan nÃ¥s i hela programmet.
  ğŸ‘‰Lokala variabler â€“ skapas inuti funktioner och existerar bara medan funktionen kÃ¶rs.

Parametrar och andra variabler i en funktion Ã¤r alltid lokala. Om en lokal variabel har samma namn som en global, kommer funktionen att anvÃ¤nda den lokala versionen, 
vilket kan skapa fÃ¶rvirring.
ğŸ‘‰BÃ¤sta praxis: undvik att blanda globala och lokala variabler. AnvÃ¤nd parametrar fÃ¶r att skicka in data i funktioner i stÃ¤llet fÃ¶r globala variabler.


Python standard modules and libraries
  En modules Ã¤r en Python-fil som innehÃ¥ller ytterligare funktioner, variabler och andra typer av kÃ¶rbar kod. Ett Python-libraries Ã¤r en samling moduler.
  I Python kan du anvÃ¤nda moduler (enskilda filer med funktioner, variabler och klasser) och bibliotek (samlingar av moduler) fÃ¶r att Ã¥teranvÃ¤nda fÃ¤rdig kod.
  Python Standard Library innehÃ¥ller mÃ¥nga fÃ¤rdiga moduler, t.ex.
    ğŸ‘‰re fÃ¶r mÃ¶nstersÃ¶kning i loggar
    ğŸ‘‰csv fÃ¶r arbete med CSV-filer
    ğŸ‘‰glob och os fÃ¶r kommandoradsinteraktion
    ğŸ‘‰time och datetime fÃ¶r tidsdata
    ğŸ‘‰statistics fÃ¶r berÃ¤kningar som medelvÃ¤rde (mean()) och median (median())
  Importera moduler:
    ğŸ‘‰import modulnamn â€“ importerar hela modulen (t.ex. import statistics â†’ anvÃ¤nd statistics.mean())
    ğŸ‘‰from modulnamn import funktion â€“ importerar en specifik funktion (t.ex. from statistics import mean, median â†’ anvÃ¤nd mean() direkt)
  Externa bibliotek: MÃ¥ste installeras innan de kan importeras. Exempel:
    ğŸ‘‰BeautifulSoup fÃ¶r HTML-parsning
    ğŸ‘‰NumPy fÃ¶r matematiska berÃ¤kningar och arrayer
    ğŸ‘‰Installering gÃ¶rs via t.ex. %pip install numpy, dÃ¤refter kan man importera med import numpy.
ğŸ‘‰ Kort sagt: Standardbiblioteket ger fÃ¤rdig kod direkt i Python, medan externa bibliotek mÃ¥ste installeras. Import gÃ¶rs antingen av hela moduler eller av enskilda funktioner.














